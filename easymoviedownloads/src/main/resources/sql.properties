#COLLECTIONS FUNCTIONS
INSERT_INTO_COLLECTIONS=insert into public.collections(name) values(?);
GET_THE_LIST_COLLECTIONS_BY_LIMITS=select collectionId,name,creationDate from public.collections where markfordelete=0 limit ? offset ?;
UPDATE_THE_COLLECTIONS_BY_ID=update public.collections set name=? where collectionid=?;
DELETE_THE_COLLECTIONS_BY_ID=update public.collections set markfordelete=1 where collectionid=?;

#YEARS FUNCTIONS
INSERT_INTO_YEARS=insert into public.years(name) values(?);
GET_THE_LIST_YEARS_BY_LIMITS=select yearId,name,creationDate from public.years where markfordelete=0 limit ? offset ?;
UPDATE_THE_YEARS_BY_ID=update public.years set name=? where yearid=?;
DELETE_THE_YEARS_BY_ID=update public.years set markfordelete=1 where yearid=?;
GET_THE_MULTIPLE_YEARS_BY_MOVIEIDS=select y.name,ym.movieid from public.year_movie ym inner join public.years y on y.yearid=ym.yearid where ym.movieid IN (%s) 

#GENRE FUNCTIONS
INSERT_INTO_GENRES=insert into public.genres(name) values(?);
GET_THE_LIST_GENRES_BY_LIMITS=select genreId,name,creationDate from public.genres where markfordelete=0 limit ? offset ?;
UPDATE_THE_GENRES_BY_ID=update public.genres set name=? where genreid=?;
DELETE_THE_GENRES_BY_ID=update public.genres set markfordelete=1 where genreid=?;
GET_THE_MULTIPLE_GERNRES_BY_MOVIEIDS=select g.name,gm.movieid from public.genre_movie gm inner join public.genres g on g.genreid=gm.genreid where gm.movieid IN (%s) 

#LANGUAGE FUNCTIONS
INSERT_INTO_LANGUAGES=insert into public.languages(name) values(?);
GET_THE_LIST_LANGUAGES_BY_LIMITS=select languageid,name,creationdate from public.languages where markfordelete=0 limit ? offset ?;
UPDATE_THE_LANGUAGES_BY_ID=update public.languages set name=? where languageId=?;
DELETE_THE_LANGUAGES_BY_ID=update public.languages set markfordelete=1 where languageId=?;

# movies functions
INSERT_INTO_MOVIES=insert into public.movie (title,keywords,downloadname,slug,imageurl,smallDescription,duration,releasedate,bigdescription,casts) values(?,?,?,?,?,?,?,?,?,?)RETURNING movieid;
GET_THE_MOVIES_WITH_UPDATE_DTO=select movieid, title,downloadcount from public.movie where markfordelete=0 limit ? offset ?;
GET_THE_SINGLE_MOVIES_BY_MOVIEID=SELECT movieid, title, keywords, downloadname, slug, imageurl, smalldescription, duration, releasedate, bigdescription, downloadcount, casts, creationdate FROM public.movie where movieid=?
UPDATE_THE_MVOIE_BY_MOVIE_ID=UPDATE public.movie SET title = ?,keywords = ?, downloadname = ?, slug = ?, imageurl = ?, smalldescription = ?,duration = ?, releasedate = ?, bigdescription = ?, casts =? WHERE movieid = ?;
SELECT_BANNER_MOVIES=select movieid,title,downloadname,slug,imageurl from public.movie order by downloadname desc limit 10;
SELECT_LATEST_MOVIES=select movieid,title,downloadname,slug,imageurl from public.movie order by creationdate desc  limit ? offset ?;
GET_THE_TOTAL_NUMBER_OF_MOVIES=select  count(*) as total from public.movie;
GET_THE_MVOIES_BY_MOVIEIDS=select movieid,title,downloadname,slug,imageurl from public.movie where movieid in (%s);
SEARCH_MOVIES_BY_TITLE=SELECT movieid, title, downloadname, slug, imageurl, ts_rank(to_tsvector('english', title), plainto_tsquery('english', ?)) AS rank FROM public.movie WHERE to_tsvector('english', title) @@ plainto_tsquery('english', ?) ORDER BY rank DESC, creationdate DESC LIMIT ? OFFSET ?;
GET_THE_TOTAL_NUMBER_OF_SEARCH_MOVIES=SELECT COUNT(*) as total FROM public.movie WHERE to_tsvector('english', title) @@ plainto_tsquery('english', ?);
GET_THE_SINGLE_MOVIES_BY_URL=SELECT movieid, title, keywords, downloadname, slug, imageurl, smalldescription, duration, releasedate, bigdescription, downloadcount, casts, creationdate FROM public.movie where slug=?
GET_THE_ALL_MOVIES=SELECT slug FROM public.movie;

# collections_movie
INSERT_INTO_COLLECTION_MOVIES=insert into public.collections_movie (movieid,collectionid)values(?,?)
GET_THE_COLLECTIONS_BY_MOVIE_ID=select c.collectionid,c.name from public.collections c inner join collections_movie cm on cm.collectionid=c.collectionid where cm.movieid=?
DELETE_ALL_THE_COLLECTION_OF_MOVIE_BY_MVOIE_ID=delete  from public.collections_movie where movieid=?;
GET_THE_MOVIEIDS_BY_COLLECTION_NAME=SELECT cm.movieid FROM public.collections_movie cm WHERE cm.collectionid = ( SELECT collectionid FROM public.collections WHERE name = ? ) ORDER BY cm.creationdate DESC LIMIT ? OFFSET ?;
GET_THE_TOTAL_NUMBER_OF_COLLECTION_MOVIES=SELECT count(cm.movieid) as total FROM public.collections_movie cm WHERE cm.collectionid = ( SELECT collectionid FROM public.collections WHERE name = ?)
# genre_movie
INSERT_INTO_GENRE_MOVIE=insert into public.genre_movie (movieid,genreid)values(?,?)
GET_THE_GENRES_BY_MOVIE_ID=select g.genreid,g.name from public.genres g inner join genre_movie gm on gm.genreid=g.genreid where gm.movieid=?
DELETE_ALL_THE_GENRES_OF_MVOIE_BY_MOVIE_ID=delete  from public.genre_movie where movieid=?;
GET_THE_MOVIEIDS_BY_GENRE_NAME=SELECT gm.movieid FROM public.genre_movie gm WHERE gm.genreid = ( SELECT genreid FROM public.genres WHERE name =? ) ORDER BY gm.creationdate DESC LIMIT ? OFFSET ?;
GET_THE_TOTAL_NUMBER_MOVIEIDS_BY_GENRE_NAME=SELECT count(gm.movieid) as total FROM public.genre_movie gm WHERE gm.genreid = ( SELECT genreid FROM public.genres WHERE name =? )
# year_movie
INSERT_INTO_YEAR_MOVIE=insert into public.year_movie (movieid,yearid)values(?,?)
GET_THE_YEARS_BY_MOVIE_ID=select y.yearid,y.name from public.years y inner join year_movie ym on ym.yearid=y.yearid where ym.movieid=?
DELETE_ALL_THE_YEARS_OF_MOVIE_BY_MOVIE_ID=delete  from public.year_movie where movieid=?;
GET_THE_MOVIEIDS_BY_YEARS=SELECT ym.movieid FROM public.year_movie ym WHERE ym.yearid = ( SELECT yearid FROM public.years WHERE name = ? ) ORDER BY ym.creationdate DESC LIMIT ? OFFSET ?;
GET_THE_TOTAL_NUMBER_MOVIEIDS_BY_YEARS=SELECT count(ym.movieid) as total FROM public.year_movie ym WHERE ym.yearid = ( SELECT yearid FROM public.years WHERE name = ? )

# langauge_ movie
INSERT_INTO_LANGUAGE_MOVIE=insert into public.language_movie (movieid,languageid)values(?,?)
GET_THE_LANGUAGES_BY_MOVIE_ID=select l.languageid,l.name from public.languages l inner join language_movie lm on lm.languageid=l.languageid where lm.movieid=?
DELETE_ALL_THE_LANGAUGES_OF_MOVIE_BY_MOVIE_ID=delete  from public.language_movie where movieid=?;
GET_THE_MOVIEIDS_BY_LANGAUGE_MOVIE=SELECT gm.movieid FROM public.language_movie gm WHERE gm.languageid = ( SELECT languageid FROM public.languages WHERE name = ? ) ORDER BY gm.creationdate DESC LIMIT ? OFFSET ?;
GET_THE_TOTAL_NUMBER_OF_LANGUAGES_MOVIES=SELECT count(gm.movieid) as total FROM public.language_movie gm WHERE gm.languageid = ( SELECT languageid FROM public.languages WHERE name = ? );

# link table
INSERT_INTO_LINK=insert into public.links(movieid,name,url) values(?,?,?);
GET_THE_ALL_LINKS_BY_ID=select linkid, movieid, name, url from public.links where movieid=?;
DELETE_ALL_THE_LINKS_OF_MOVIE_BY_MOVIE_ID=delete  from public.links where movieid=?;

#movieRequet
CREATE_A_REQUEST=insert into public.movierequest(email,message) values(?,?);
GET_ALL_THE_MESSAGES=select movieRequstId,email,message from public.movierequest limit ? offset ?;

